# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: EKS Rolling 

on: workflow_dispatch

env:
  AWS_REGION: "us-east-1"                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: "appmod" 
  ECR_REGISTRY: "733816228796.dkr.ecr.us-east-1.amazonaws.com/appmod"  #set this to your Amazon ECR repository name

  CONTAINER_NAME: "app-mod-web"          # set this to the name of the container in the
     
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Configure kubeconfig
        run: |
             echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
            
#       - name: Checkout
#         uses: actions/checkout@v3
      
#       - name: Set up JDK 11
#         uses: actions/setup-java@v3
#         with:
#           java-version: '11'
#           distribution: 'temurin'
#           cache: maven
          
#       - name: Build with Maven
#         run: | 
#           mvn -B package --file pom.xml


# #       - name: SonarQube Scan
# #         uses: sonarsource/sonarqube-scan-action@master
# #         env:
# #           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
# #           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
# #         with:
# #           projectBaseDir: src/main
# #           args: >
# #             -Dsonar.organization=app-mod
# #             -Dsonar.projectKey=app-mod


#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           ls
#           pwd
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


#       - name: Configure kubeconfig
#         run: |
#             curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
#             chmod +x kubectl
#             sudo mv kubectl /usr/local/bin/
#             echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
            
#       - name: Deploy
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         run: |
#             export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
#             export IMAGE_TAG=${{ env.IMAGE_TAG }}
#             export KUBECONFIG=kubeconfig.yaml
#             envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
#             kubectl kustomize k8s | kubectl apply -f -
